{"ast":null,"code":"import { HttpHeaders, HttpParams } from '@angular/common/http';\nimport { BehaviorSubject } from 'rxjs';\nimport { CustomEncoder } from '../common/customEncoder';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@auth0/angular-jwt\";\nimport * as i3 from \"./environment-url.service\";\nimport * as i4 from \"../common/helpers\";\nexport let AuthenticationService = /*#__PURE__*/(() => {\n  class AuthenticationService {\n    constructor(http, jwtHelper, envUrl, helpers) {\n      this.http = http;\n      this.jwtHelper = jwtHelper;\n      this.envUrl = envUrl;\n      this.helpers = helpers;\n      this.authChangeSub = new BehaviorSubject(false);\n      this.authChanged = this.authChangeSub.asObservable();\n\n      this.registerUser = (route, body) => {\n        let httpOptions = {\n          headers: new HttpHeaders({\n            'Content-Type': 'application/json'\n          })\n        };\n        return this.http.post(this.createCompleteRoute(route, this.envUrl.urlAddress), body, httpOptions);\n      };\n\n      this.resendConfirmationEmail = (route, email, uri) => {\n        return this.http.get(this.createCompleteRoute(route + '?email=' + email + '&uri=' + uri, this.envUrl.urlAddress));\n      };\n\n      this.forgotPassword = (route, body) => {\n        return this.http.post(this.createCompleteRoute(route, this.envUrl.urlAddress), body);\n      };\n\n      this.resetPassword = (route, body) => {\n        return this.http.post(this.createCompleteRoute(route, this.envUrl.urlAddress), body);\n      };\n\n      this.loginUser = (route, body) => {\n        return this.http.post(this.createCompleteRoute(route, this.envUrl.urlAddress), body);\n      };\n\n      this.logout = (route = \"\") => {\n        if (!route) {\n          route = \"api/accounts/logout\";\n        }\n\n        window.localStorage.clear();\n        return this.http.post(this.createCompleteRoute(route, this.envUrl.urlAddress), null);\n      };\n\n      this.createCompleteRoute = (route, envAddress) => {\n        return `${envAddress}/${route}`;\n      };\n\n      this.isUserAuthenticated = () => {\n        const token = localStorage.getItem(\"token\");\n        return token && !this.jwtHelper.isTokenExpired(token);\n      };\n\n      this.sendAuthStateChangeNotification = isAuthenticated => {\n        this.authChangeSub.next(isAuthenticated);\n      };\n\n      this.confirmEmail = (route, token, email) => {\n        let params = new HttpParams({\n          encoder: new CustomEncoder()\n        });\n        params = params.append('token', token);\n        params = params.append('email', email);\n        return this.http.get(this.createCompleteRoute(route, this.envUrl.urlAddress), {\n          params: params\n        });\n      };\n\n      this.getLoggeInUserBasicDetails = route => {\n        return this.http.get(this.createCompleteRoute(route, this.envUrl.urlAddress), {});\n      };\n    }\n\n  }\n\n  AuthenticationService.ɵfac = function AuthenticationService_Factory(t) {\n    return new (t || AuthenticationService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.JwtHelperService), i0.ɵɵinject(i3.EnvironmentUrlService), i0.ɵɵinject(i4.Helpers));\n  };\n\n  AuthenticationService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthenticationService,\n    factory: AuthenticationService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthenticationService;\n})();","map":null,"metadata":{},"sourceType":"module"}