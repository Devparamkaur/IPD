{"ast":null,"code":"import { FormControl, FormGroup, Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../../service/authentication.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"@angular/forms\";\n\nfunction ResetPasswordComponent_div_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 17);\n    i0.ɵɵelement(1, \"span\", 18);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"innerHTML\", ctx_r0.errorMessage, i0.ɵɵsanitizeHtml);\n  }\n}\n\nconst _c0 = function () {\n  return [\"/login\"];\n};\n\nfunction ResetPasswordComponent_div_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 19)(1, \"div\", 20);\n    i0.ɵɵtext(2, \"Your password has been reset. \");\n    i0.ɵɵelementStart(3, \"a\", 21);\n    i0.ɵɵtext(4, \" Login \");\n    i0.ɵɵelementEnd()()();\n  }\n\n  if (rf & 2) {\n    i0.ɵɵadvance(3);\n    i0.ɵɵproperty(\"routerLink\", i0.ɵɵpureFunction0(1, _c0));\n  }\n}\n\nfunction ResetPasswordComponent_small_14_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"small\", 22);\n    i0.ɵɵtext(1, \"Password is required\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction ResetPasswordComponent_small_20_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"small\", 22);\n    i0.ɵɵtext(1, \"Confirmation is required\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction ResetPasswordComponent_small_21_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"small\", 22);\n    i0.ɵɵtext(1, \"The Password and Confirmation Password do not match\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nexport let ResetPasswordComponent = /*#__PURE__*/(() => {\n  class ResetPasswordComponent {\n    constructor(authService, route) {\n      this.authService = authService;\n      this.route = route;\n\n      this.validateControl = controlName => {\n        return this.resetPasswordForm.get(controlName).invalid && this.resetPasswordForm.get(controlName).touched;\n      };\n\n      this.hasError = (controlName, errorName) => {\n        return this.resetPasswordForm.get(controlName).hasError(errorName);\n      };\n\n      this.resetPassword = resetPasswordFormValue => {\n        this.submitted = true;\n        this.showError = this.showSuccess = false;\n        const resetPass = Object.assign({}, resetPasswordFormValue);\n        const resetPassDto = {\n          password: resetPass.password,\n          confirmPassword: resetPass.confirm,\n          token: this.token,\n          email: this.email\n        };\n        this.authService.resetPassword('api/accounts/resetpassword', resetPassDto).subscribe({\n          next: res => {\n            if (res.succeeded) {\n              this.showSuccess = true;\n            }\n          },\n          error: err => {\n            this.submitted = false;\n            this.showError = true;\n            this.errorMessage = err.error;\n          }\n        });\n      };\n    }\n\n    ngOnInit() {\n      this.resetPasswordForm = new FormGroup({\n        password: new FormControl('', [Validators.required]),\n        confirm: new FormControl('', [Validators.required])\n      }, {\n        validators: this.validateAreEqual\n      });\n      this.token = this.route.snapshot.queryParams['token'];\n      this.email = this.route.snapshot.queryParams['email'];\n    }\n\n    validateAreEqual(c) {\n      return c.value.password === c.value.confirm ? null : {\n        notmatched: true\n      };\n    }\n\n  }\n\n  ResetPasswordComponent.ɵfac = function ResetPasswordComponent_Factory(t) {\n    return new (t || ResetPasswordComponent)(i0.ɵɵdirectiveInject(i1.AuthenticationService), i0.ɵɵdirectiveInject(i2.ActivatedRoute));\n  };\n\n  ResetPasswordComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ResetPasswordComponent,\n    selectors: [[\"app-reset-password\"]],\n    decls: 26,\n    vars: 8,\n    consts: [[1, \"surface-ground\"], [1, \"flex\", \"flex-wrap\", \"justify-content-center\"], [1, \"w-full\", \"lg:w-6\", \"p-4\", \"lg:p-7\", \"surface-card\"], [1, \"flex\", \"align-items-center\", \"justify-content-between\", \"mb-5\"], [1, \"text-2xl\", \"font-medium\", \"text-900\"], [\"class\", \"error\", 4, \"ngIf\"], [\"class\", \"success\", 4, \"ngIf\"], [\"autocomplete\", \"off\", \"novalidate\", \"\", 3, \"formGroup\", \"ngSubmit\"], [1, \"mb-3\", \"row\"], [\"for\", \"password\", 1, \"block\", \"text-900\", \"font-medium\", \"mb-2\"], [1, \"\"], [\"type\", \"password\", \"id\", \"password\", \"formControlName\", \"password\", \"pInputText\", \"\", 1, \"md:col-6\", \"col-12\"], [\"class\", \"ng-dirty ng-invalid mt-2 block\", 4, \"ngIf\"], [\"for\", \"confirm\", 1, \"block\", \"text-900\", \"font-medium\", \"mb-2\"], [\"type\", \"password\", \"id\", \"confirm\", \"formControlName\", \"confirm\", \"pInputText\", \"\", 1, \"md:col-6\", \"col-12\"], [1, \"col-md-1\"], [\"type\", \"submit\", \"pButton\", \"\", \"pRipple\", \"\", \"label\", \"Submit\", 3, \"disabled\"], [1, \"error\"], [3, \"innerHTML\"], [1, \"success\"], [1, \"flex\", \"alig-items-center\"], [\"pButton\", \"\", \"href\", \"#\", 1, \"p-button-success\", \"p-button-sm\", \"no-underline\", \"ml-1\", 3, \"routerLink\"], [1, \"ng-dirty\", \"ng-invalid\", \"mt-2\", \"block\"]],\n    template: function ResetPasswordComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2)(3, \"div\", 3)(4, \"span\", 4);\n        i0.ɵɵtext(5, \"Reset Password\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵtemplate(6, ResetPasswordComponent_div_6_Template, 2, 1, \"div\", 5);\n        i0.ɵɵtemplate(7, ResetPasswordComponent_div_7_Template, 5, 2, \"div\", 6);\n        i0.ɵɵelementStart(8, \"form\", 7);\n        i0.ɵɵlistener(\"ngSubmit\", function ResetPasswordComponent_Template_form_ngSubmit_8_listener() {\n          return ctx.resetPassword(ctx.resetPasswordForm.value);\n        });\n        i0.ɵɵelementStart(9, \"div\", 8)(10, \"label\", 9);\n        i0.ɵɵtext(11, \"Password:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(12, \"div\", 10);\n        i0.ɵɵelement(13, \"input\", 11);\n        i0.ɵɵtemplate(14, ResetPasswordComponent_small_14_Template, 2, 0, \"small\", 12);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(15, \"div\", 8)(16, \"label\", 13);\n        i0.ɵɵtext(17, \"Confirm Password:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(18, \"div\", 10);\n        i0.ɵɵelement(19, \"input\", 14);\n        i0.ɵɵtemplate(20, ResetPasswordComponent_small_20_Template, 2, 0, \"small\", 12);\n        i0.ɵɵtemplate(21, ResetPasswordComponent_small_21_Template, 2, 0, \"small\", 12);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelement(22, \"br\");\n        i0.ɵɵelementStart(23, \"div\", 8)(24, \"div\", 15);\n        i0.ɵɵelement(25, \"button\", 16);\n        i0.ɵɵelementEnd()()()()()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"@fadeAnimation\", undefined);\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"ngIf\", ctx.showError);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.showSuccess);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"formGroup\", ctx.resetPasswordForm);\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"ngIf\", ctx.validateControl(\"password\") && ctx.hasError(\"password\", \"required\"));\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"ngIf\", ctx.validateControl(\"confirm\") && ctx.hasError(\"confirm\", \"required\"));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.resetPasswordForm.controls[\"confirm\"].touched && ctx.resetPasswordForm.hasError(\"notmatched\"));\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"disabled\", !ctx.resetPasswordForm.valid || ctx.submitted);\n      }\n    },\n    dependencies: [i3.NgIf, i4.ɵNgNoValidate, i4.DefaultValueAccessor, i4.NgControlStatus, i4.NgControlStatusGroup, i4.FormGroupDirective, i4.FormControlName, i2.RouterLinkWithHref]\n  });\n  return ResetPasswordComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}