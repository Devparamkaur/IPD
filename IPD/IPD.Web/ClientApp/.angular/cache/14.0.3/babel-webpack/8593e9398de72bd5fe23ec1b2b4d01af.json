{"ast":null,"code":"import { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"./authentication.service\";\nexport let ErrorHandlerService = /*#__PURE__*/(() => {\n  class ErrorHandlerService {\n    constructor(router, authService) {\n      this.router = router;\n      this.authService = authService;\n\n      this.handleError = error => {\n        console.log(error);\n\n        if (error.status === 404) {\n          return this.handleNotFound(error);\n        } else if (error.status === 400) {\n          return this.handleBadRequest(error);\n        } else if (error.status === 401) {\n          return this.handleBadRequest(error);\n        }\n\n        return error.message;\n      };\n\n      this.handleNotFound = error => {\n        //this.router.navigate(['/404']);\n        return error.message;\n      };\n\n      this.handleUnAuthorzied = error => {\n        // this.router.navigate(['/not-authorized']);\n        return error.message;\n      };\n\n      this.handleBadRequest = error => {\n        console.log(this.router.url);\n\n        if (this.router.url === '/register') {\n          let message = '';\n          const values = Object.values(error.error);\n          values.map(m => {\n            message += m + '<br>';\n          });\n          return message.slice(0, -4);\n        } else {\n          return error.error ? error.error : error.message;\n        }\n      };\n    }\n\n    intercept(req, next) {\n      return next.handle(req).pipe(catchError(error => {\n        let errorMessage = this.handleError(error);\n        return throwError(() => new Error(errorMessage));\n      }));\n    }\n\n  }\n\n  ErrorHandlerService.ɵfac = function ErrorHandlerService_Factory(t) {\n    return new (t || ErrorHandlerService)(i0.ɵɵinject(i1.Router), i0.ɵɵinject(i2.AuthenticationService));\n  };\n\n  ErrorHandlerService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ErrorHandlerService,\n    factory: ErrorHandlerService.ɵfac,\n    providedIn: 'root'\n  });\n  return ErrorHandlerService;\n})();","map":null,"metadata":{},"sourceType":"module"}