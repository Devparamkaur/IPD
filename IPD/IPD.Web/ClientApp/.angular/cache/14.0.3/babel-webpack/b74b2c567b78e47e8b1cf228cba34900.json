{"ast":null,"code":"import { FormControl, FormGroup, Validators } from '@angular/forms';\nimport { AuthenticationService } from '../../../service/authentication.service';\nimport { ToastrService } from 'ngx-toastr';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../../../common/helpers\";\nimport * as i2 from \"../../../service/authentication.service\";\nimport * as i3 from \"ngx-toastr\";\nimport * as i4 from \"@angular/router\";\nimport * as i5 from \"@angular/common\";\nimport * as i6 from \"@angular/forms\";\n\nfunction LoginComponent_small_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"small\", 12);\n    i0.ɵɵtext(1, \"Please provide a valid email\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction LoginComponent_small_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"small\", 12);\n    i0.ɵɵtext(1, \"Email is required\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nfunction LoginComponent_small_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"small\", 12);\n    i0.ɵɵtext(1, \"Password is required\");\n    i0.ɵɵelementEnd();\n  }\n}\n\nconst _c0 = function (a0) {\n  return {\n    \"ng-invalid ng-dirty\": a0\n  };\n};\n\nconst _c1 = function () {\n  return [\"/forgot-password\"];\n};\n\nexport let LoginComponent = /*#__PURE__*/(() => {\n  class LoginComponent {\n    constructor(helpers, authService, toastrService, router, route) {\n      this.helpers = helpers;\n      this.authService = authService;\n      this.toastrService = toastrService;\n      this.router = router;\n      this.route = route;\n\n      this.validateControl = controlName => {\n        return this.loginForm.get(controlName).invalid && this.loginForm.get(controlName).touched;\n      };\n\n      this.hasError = (controlName, errorName) => {\n        return this.loginForm.get(controlName).hasError(errorName);\n      };\n\n      this.loginUser = loginFormValue => {\n        this.submitted = true;\n        const login = Object.assign({}, loginFormValue);\n        const userForAuth = {\n          email: login.email,\n          password: login.password\n        };\n        this.authService.loginUser('api/accounts/login', userForAuth).subscribe({\n          next: res => {\n            if (res.succeeded) {\n              localStorage.setItem(\"token\", res.data.token);\n              this.router.navigate([this.returnUrl]);\n              this.authService.sendAuthStateChangeNotification(res.succeeded);\n            }\n          },\n          error: err => {\n            this.submitted = false;\n            this.toastrService.error(err.message);\n          }\n        });\n      };\n    }\n\n    ngOnInit() {\n      this.loginForm = new FormGroup({\n        email: new FormControl(\"\", [Validators.required, Validators.email]),\n        password: new FormControl(\"\", [Validators.required])\n      });\n      this.returnUrl = this.route.snapshot.queryParams['returnUrl'] || '/home';\n    }\n\n  }\n\n  LoginComponent.ɵfac = function LoginComponent_Factory(t) {\n    return new (t || LoginComponent)(i0.ɵɵdirectiveInject(i1.Helpers), i0.ɵɵdirectiveInject(i2.AuthenticationService), i0.ɵɵdirectiveInject(i3.ToastrService), i0.ɵɵdirectiveInject(i4.Router), i0.ɵɵdirectiveInject(i4.ActivatedRoute));\n  };\n\n  LoginComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: LoginComponent,\n    selectors: [[\"app-login\"]],\n    features: [i0.ɵɵProvidersFeature([AuthenticationService, ToastrService])],\n    decls: 18,\n    vars: 14,\n    consts: [[\"autocomplete\", \"off\", \"novalidate\", \"\", 3, \"formGroup\", \"ngSubmit\"], [\"for\", \"email\", 1, \"block\", \"text-900\", \"font-medium\", \"mb-2\"], [\"id\", \"email\", \"formControlName\", \"email\", \"type\", \"text\", \"pInputText\", \"\", 1, \"w-full\", \"p-3\", 3, \"required\", \"ngClass\"], [\"class\", \"ng-dirty ng-invalid mt-2 block\", 4, \"ngIf\"], [\"for\", \"password\", 1, \"block\", \"text-900\", \"font-medium\", \"mt-3\", \"mb-2\"], [\"id\", \"password\", \"formControlName\", \"password\", \"type\", \"password\", \"pInputText\", \"\", 1, \"w-full\", \"p-3\", 3, \"required\", \"ngClass\"], [1, \"flex\", \"align-items-center\", \"justify-content-between\", \"mt-3\", \"mb-6\"], [1, \"flex\", \"align-items-center\"], [\"id\", \"rememberme\", \"styleClass\", \"mr-2\", 3, \"binary\"], [\"for\", \"rememberme\"], [1, \"font-medium\", \"text-blue-500\", \"hover:text-blue-700\", \"cursor-pointer\", \"transition-colors\", \"transition-duration-150\", 3, \"routerLink\"], [\"type\", \"submit\", \"pButton\", \"\", \"pRipple\", \"\", \"label\", \"Sign In\", 1, \"w-full\", \"py-3\", \"font-medium\", 3, \"disabled\"], [1, \"ng-dirty\", \"ng-invalid\", \"mt-2\", \"block\"]],\n    template: function LoginComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"form\", 0);\n        i0.ɵɵlistener(\"ngSubmit\", function LoginComponent_Template_form_ngSubmit_0_listener() {\n          return ctx.loginUser(ctx.loginForm.value);\n        });\n        i0.ɵɵelementStart(1, \"label\", 1);\n        i0.ɵɵtext(2, \"Username / Email\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(3, \"input\", 2);\n        i0.ɵɵtemplate(4, LoginComponent_small_4_Template, 2, 0, \"small\", 3);\n        i0.ɵɵtemplate(5, LoginComponent_small_5_Template, 2, 0, \"small\", 3);\n        i0.ɵɵelementStart(6, \"label\", 4);\n        i0.ɵɵtext(7, \"Password\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(8, \"input\", 5);\n        i0.ɵɵtemplate(9, LoginComponent_small_9_Template, 2, 0, \"small\", 3);\n        i0.ɵɵelementStart(10, \"div\", 6)(11, \"div\", 7);\n        i0.ɵɵelement(12, \"p-checkbox\", 8);\n        i0.ɵɵelementStart(13, \"label\", 9);\n        i0.ɵɵtext(14, \"Remember me\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(15, \"a\", 10);\n        i0.ɵɵtext(16, \"Forgot password?\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelement(17, \"button\", 11);\n        i0.ɵɵelementEnd();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"formGroup\", ctx.loginForm);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(9, _c0, ctx.validateControl(\"email\") && ctx.hasError(\"email\", \"email\") || ctx.validateControl(\"email\") && ctx.hasError(\"email\", \"required\")));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.validateControl(\"email\") && ctx.hasError(\"email\", \"email\"));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.validateControl(\"email\") && ctx.hasError(\"email\", \"required\"));\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction1(11, _c0, ctx.validateControl(\"password\") && ctx.hasError(\"password\", \"required\")));\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.validateControl(\"password\") && ctx.hasError(\"password\", \"required\"));\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"binary\", true);\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"routerLink\", i0.ɵɵpureFunction0(13, _c1));\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"disabled\", !ctx.loginForm.valid || ctx.submitted);\n      }\n    },\n    dependencies: [i5.NgClass, i5.NgIf, i6.ɵNgNoValidate, i6.DefaultValueAccessor, i6.NgControlStatus, i6.NgControlStatusGroup, i6.RequiredValidator, i6.FormGroupDirective, i6.FormControlName, i4.RouterLinkWithHref],\n    data: {\n      animation: []\n    }\n  });\n  return LoginComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}